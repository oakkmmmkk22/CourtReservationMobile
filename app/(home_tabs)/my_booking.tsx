import React, { useState, useEffect, useRef, useCallback } from "react";
import {
  View,
  Text,
  TextInput,
  FlatList,
  Image,
  StyleSheet,
  Modal,
  TouchableWithoutFeedback,
  TouchableOpacity,
  ScrollView,
} from "react-native";
import api from "../axiosinstance";
import { useFocusEffect } from "@react-navigation/native";
import { router } from "expo-router";

interface Reservations {
  id: number;
  court_id: number;
  date: string;
  start_time: string;
  end_time: string;
  status: string;
  rating: number;
  stadium_name: string;
  court_number: number;
  type: string;
  price: number;
  party_id: number;
  pictures: { path: string; photoUrl: string }[];
}

const HomeScreen = () => {
  const [mybook, setMybook] = useState<Reservations[]>([]);
  const [mode, setMode] = useState<"party" | "individual" | "all">("all");
  const fetchData = () => {
    api
      .get("/reservations")
      .then((response) => {
        console.log("API Response:", response.data);
        setMybook(response.data); // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
      });
  };

  useFocusEffect(
    useCallback(() => {
      fetchData();
    }, [])
  );

  
  const handleCancel = (item: Reservations) => {
    console.log("Cancel button clicked");
    // ‡πÉ‡∏™‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Cancel ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    deleteItem(item);
  };

  const deleteItem = async (item: Reservations) => {
    try {
      console.log("cancel:", item.id);
      
      const response = await api.post("/cancel_reservation", {
        reservationId: item.id,
      });
  
      fetchData(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      console.log("Cancel success:", response.data);
    } catch (error) {
      console.error("Cancel failed:");
    }
  };

  const filteredData = mybook.filter((item) => {
    if (mode === "party") {
      return item.party_id !== null && item.party_id !== 0;
    }
    if (mode === "individual") {
      return item.party_id === null || item.party_id === 0;
    }

    return true;
  });

  return (
    <View style={styles.container}>
      {/* //all stadiums  */}
      <View style={styles.left}>
        <Text style={styles.sectionTitle}>Reservation</Text>
        <View style={styles.center}>
          <Text style={styles.itemCount}> {mybook.length} </Text>
        </View>
      </View>
      <View style={styles.modeSelection}>
        <TouchableOpacity
          onPress={() => setMode("all")}
          style={[styles.button, mode === "all" && styles.activeButton]}
        >
          <Text
            style={mode === "all" ? styles.activeMode : styles.inactiveMode}
          >
            All
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => setMode("party")}
          style={[styles.button, mode === "party" && styles.activeButton]}
        >
          <Text
            style={mode === "party" ? styles.activeMode : styles.inactiveMode}
          >
            Party
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => setMode("individual")}
          style={[styles.button, mode === "individual" && styles.activeButton]}
        >
          <Text
            style={
              mode === "individual" ? styles.activeMode : styles.inactiveMode
            }
          >
            Individual
          </Text>
        </TouchableOpacity>
      </View>
      <FlatList
        data={filteredData.sort((a, b) => {

          
          if (a.status === "cancelled" && b.status !== "cancelled") {
            return 1; // ‡πÉ‡∏´‡πâ "cancelled" ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
          }
          if (a.status !== "cancelled" && b.status === "cancelled") {
            return -1; // ‡πÉ‡∏´‡πâ "cancelled" ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
          }

          const now = new Date().getTime(); // ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          const dateA = new Date(a.date).toISOString().split("T")[0];
          const dateB = new Date(b.date).toISOString().split("T")[0];
          const dateTimeA = new Date(`${dateA}T${a.start_time}`).getTime();
          const dateTimeB = new Date(`${dateB}T${b.start_time}`).getTime();

          console.log(`üîç A: ${dateA} ${a.start_time} ‚Üí ${dateTimeA}`);
          console.log(`üîç B: ${dateB} ${b.start_time} ‚Üí ${dateTimeB}`);
          
          if (dateTimeA < now && dateTimeB < now) {
            return dateTimeB - dateTimeA; // ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô
          }

          if (dateTimeA < now) return 1;
          if (dateTimeB < now) return -1;

          if (dateA !== dateB) {
            return dateTimeA - dateTimeB;
          }

          return dateTimeA - dateTimeB;
        })}
        keyExtractor={(item) => item.id.toString()}
        showsVerticalScrollIndicator={false}
        renderItem={({ item }: { item: Reservations }) => {
          const isIndividual = !item.party_id;
          const currentTime = new Date().getTime(); // ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          const reservationTime = new Date(`${item.date.slice(0, 10)}T${item.start_time}`).getTime();
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤
          console.log(`Date: ${item.date}, Start Time: ${item.start_time}`);
          console.log(`Current Time: ${currentTime}`);
          console.log(`Reservation Time: ${reservationTime}`);
          const isPast = reservationTime < currentTime;
           const cardStyle = item.status === "cancelled" 
      ? { ...styles.card, opacity: 0.5 }  // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∂‡∏ö‡∏•‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô cancelled
      : isPast 
      ? { ...styles.card, opacity: 0.7 }  // ‡∏à‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
      : styles.card;
          console.log(`Item ID: ${item.id}, Status: ${item.status}`);
          return (
            <TouchableOpacity 
                onPress={() =>
                  router.push({
                  pathname: "/pay-slip",
                  params: {
                      idslip_for_pay:item.id,
                      mode_party: item.party_id,
                      place: item.stadium_name,
                      court: item.court_number,
                      type: item.Type,
                      date_pay: item.date,
                      start_time:item.start_time,
                      end_time:item.end_time,
                      price:item.price,
                  },
                  })
              }>
              <View style={cardStyle}>
                <View style={{ flex: 4 }}>
                     
                {item.pictures?.[0] && ( // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
                  <Image
                    source={{ uri: item.pictures[0].photoUrl }}
                    style={styles.cardImage}
                  />
                )}   
                      
                
                  {/* <Image source={{ uri: item.image }} style={styles.cardImage} /> */}
                </View>
                <View style={styles.cardContent}>
                  <Text style={styles.dateText}>{item.date.slice(0, 10)}</Text>
                  <View style={styles.cardFooter}>
                    <Text style={styles.t}>Place: </Text>
                    <Text style={styles.cardTitle}>{item.stadium_name}</Text>
                  </View>

                  <View style={styles.cardFooter}>
                    <Text style={styles.t}>Court: </Text>
                    <Text style={styles.cardCourt}>
                      {item.Type} Court {item.court_number}
                    </Text>
                  </View>

                  <View style={styles.cardFooter}>
                    <Text style={styles.t}>Time: </Text>
                    <Text style={styles.cardTime}>
                      {item.start_time.slice(0, 5)} -{" "}
                      {item.end_time.slice(0, 5)}
                    </Text>
                  </View>

                  <View style={styles.cardFooter}>
                    <Text style={styles.t}>Price: </Text>
                    <Text style={styles.cardPrice}>{item.price}</Text>
                  </View>

                  <View style={styles.cardFooter}>
                    <Text style={styles.t}>Status: </Text>
                    <Text
                      style={item.status === "cancelled" ? styles.cancelledStatus : styles.cardStatus}
                    >
                    {item.status}
              </Text>
                  </View>

                  <View style={styles.modeContainer}>
                    <View style={{marginBottom:13}}>
                      <Text
                        style={
                          item.party_id ? styles.partyMode : styles.notPartyMode
                        }
                      >
                        {item.party_id ? "üéâ Party" : "‚ö° Individual"}
                      </Text>
                    </View>
                    <View style={{alignItems:'flex-end',flex:1}}>
                        {item.status !== "cancelled" && isIndividual && reservationTime > currentTime && (
                          <TouchableOpacity
                            onPress={() => handleCancel(item)}
                            style={styles.cancelButton}
                          >
                            <Text style={styles.cancelButtonText}>Cancel</Text>
                          </TouchableOpacity>
                        )}
                    </View>
                  </View>
                </View>
              </View>
            </TouchableOpacity>
          );
        }}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#F5F5F5" },
  sectionTitle: { fontSize: 20, fontWeight: "bold", marginRight: 10 },

  left: { alignItems: "flex-end", padding: 15 },

  card: {
    flexDirection: "row",
    backgroundColor: "white",
    margin: 10,
    borderRadius: 10,
    overflow: "hidden",
    flex: 1,
    // padding: 10,
    // position: "relative"
  },
  cardImage: {
    width: '100%', // ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á container
    height: 200, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
    borderRadius: 8, // ‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á
    resizeMode: 'cover', // ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ö‡∏¥‡∏î‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß
    
  },
  cardContent: {
    padding: 10,
    flex: 6,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: "bold",
    textDecorationLine: "underline",
  },
  cardCourt: {
    fontSize: 15,
    color: "black",
    fontWeight: "bold",
  },
  cardTime: {
    fontSize: 15,
    color: "black",
    fontWeight: "bold",
  },
  cardFooter: {
    flexDirection: "row",
    marginTop: 5,
  },
  cardPrice: {
    fontSize: 15,
    color: "black",
    fontWeight: "bold",
  },
  cardStatus: {
    fontSize: 15,
    color: "black",
    fontWeight: "bold",
  },
  renderCountText: {
    fontSize: 16,
    fontWeight: "bold",
    padding: 10,
    textAlign: "center",
  },
  itemCount: {
    fontSize: 20,
    fontWeight: "bold",
    color: "gray",
  },
  center: {
    paddingRight: 50,
  },
  t: {
    fontSize: 16,
    color: "gray",
    paddingRight: 5,
  },
  dateText: {
    position: "absolute",
    top: 5,
    right: 10,
    fontSize: 14,
    fontWeight: "bold",
    color: "gray",
  },
  modeContainer: {
    paddingVertical: 5,
    alignItems: "flex-end",
    borderRadius: 8,
    flexDirection: "row",
  },
  partyMode: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#d9534f", // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
  },
  notPartyMode: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#007bff", // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
  },
  cancelButton: {
    backgroundColor: "#d9534f", // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
    paddingVertical: 10,
    borderRadius: 5,
    marginTop: 10,
    alignItems: "center",
    width: 80,
  },
  cancelButtonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
  },
  modeSelection: {
    flexDirection: "row",
    justifyContent: "space-around",
    marginBottom: 10,
  },

  button: {
    padding: 10,
    margin: 5,
    borderRadius: 8,
    backgroundColor: "#f0f0f0", // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏Å‡∏ï‡∏¥
    alignItems: "center",
    justifyContent: "center",
  },
  activeButton: {
    backgroundColor: "black", // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  },
  activeMode: {
    color: "#fff", // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    fontWeight: "bold",
  },
  inactiveMode: {
    color: "black", // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  },
  imageContainer: {
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "center", // ‡∏´‡∏£‡∏∑‡∏≠ "space-between"
    marginBottom: 10,
  },
  cancelledStatus: {
    fontSize: 15,
    color: "red", // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "cancelled"
    fontWeight: "bold",
  },
  
});

export default HomeScreen;
